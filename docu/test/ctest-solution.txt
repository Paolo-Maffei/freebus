Kleiner C Test:
Lösung:

1. Was steht in Variable var und test?
var=5
test=6

2. Warum sollte man dieses Konstrukt vermeiden?
Jeder Kompiler kann das ++ Konstrukt anders auswerten, aus diesem Grund ist es mit Vorsicht zu geniesen.

3. Was macht er hier?
Setzt das Bit i in timerRunning auf Null.

4. Was macht er hier?
Setzt das Bit i in portValue auf Eins.

5. Was bedeutet das?
Prüft ob das i-te Bit in timerRunning gesetzt ist und wenn ja ruft er die Funktion DEBUG_PUTC auf.

6. Was wird ausgegeben (fiktive print Anweisung):
Ziffer zwei

7. Was steht in temp drin?
temp=0x02

8. Was wird bei diesen Funktionsaufruf übergeben?
Der Wert 0x0 und 1, und ein Zeiger auf portValue.

9. Was ist hier falsch und was würde er machen wenn es richtig wäre?
Das \ in der ersten Zeile fehlt. Er setzt einige Variable die für den Timer zuständig sind (ist AVR spezigischer Code).

10. Warum nutze ich solche defines und wann macht es keinen Sinn mehr?
Damit kann man schnell Funktion auf andere ummappen um z.b. eine generische DEBUG Funktion zu haben die dann ja nach Kompilierflags auf andere Funktion gesetzt werden können.
Dadurch kann man Funktionsaufruf vermeiden und der Stackoverhead fällt weg, ist einfach schneller bei ein paar Zeilen.
Es macht nur Sinn, solange es nur wenige Zeilen sind, bei mehren Zeilen macht es Sinn eine Funktion zu schreiben, da sonst zu viel Platz auf dem Mikrokontroller verbraucht wird.

11. Was wird übergeben?
sendRespondTelegram(1,0);

12. Wir gross ist das Array und von welchem index bis zu welchem Index
    kann man was reinschreiben (uint8_t sind 8 Bit)?
299 Byte, von 0-298.

13. Was bedeuted das static bei einer Variabledeklaration?
Im globalen Bereich ist eine Static Variable eine private Variable inerhalb der Datei, d.h. aus einer anderen Datei kann auf diese Variable nicht zugegriffen werden.
Im lokalen Bereich bleibt der Inhalt der Variable nach dem verlassen der Variable erhalten, da diese nicht auf dem Stack abgelegt wird.

14. Was ist ein Prototype?
Eine Funktionsdeklaration, legt die Aufruf- und Rückgabewerte fest.

15. Wann setzte ich einen Protoype in eine .h und wann in eine .c Datei?
.h wenn sie von anderen Dateien aufgerufen werden soll, .c wenn sie private sein soll.
